{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parseDate from '../parseDate.js';\nimport Integer, { isInteger } from '../../types/Integer.js';\nimport URL, { isURL } from '../../types/URL.js';\nimport Email, { isEmail } from '../../types/Email.js';\nvar DEFAULT_OPTIONS = {\n  isColumnOriented: false\n};\n/**\r\n * Convert 2D array to nested objects.\r\n * If row oriented data, row 0 is dotted key names.\r\n * Column oriented data is transposed.\r\n * @param {any[][]} data - An array of rows, each row being an array of cells.\r\n * @param {object} schema\r\n * @return {object[]}\r\n */\n\nexport default function (data, schema, options) {\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  var _options = options,\n      isColumnOriented = _options.isColumnOriented,\n      rowMap = _options.rowMap;\n  validateSchema(schema);\n\n  if (isColumnOriented) {\n    data = transpose(data);\n  }\n\n  var columns = data[0];\n  var results = [];\n  var errors = [];\n\n  for (var i = 1; i < data.length; i++) {\n    var result = read(schema, data[i], i - 1, columns, errors, options);\n\n    if (result) {\n      results.push(result);\n    }\n  } // Correct error rows.\n\n\n  if (rowMap) {\n    for (var _iterator = _createForOfIteratorHelperLoose(errors), _step; !(_step = _iterator()).done;) {\n      var error = _step.value; // Convert the `row` index in `data` to the\n      // actual `row` index in the spreadsheet.\n      // The `1` compensates for the header row.\n\n      error.row = rowMap[error.row] + 1;\n    }\n  }\n\n  return {\n    rows: results,\n    errors: errors\n  };\n}\n\nfunction read(schema, row, rowIndex, columns, errors, options) {\n  var object = {};\n  var isEmptyObject = true;\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var schemaEntry = schema[key];\n    var isNestedSchema = _typeof(schemaEntry.type) === 'object' && !Array.isArray(schemaEntry.type);\n    var rawValue = row[columns.indexOf(key)];\n\n    if (rawValue === undefined) {\n      rawValue = null;\n    }\n\n    var value = void 0;\n    var error = void 0;\n    var reason = void 0;\n\n    if (isNestedSchema) {\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options);\n    } else {\n      if (rawValue === null) {\n        value = null;\n      } else if (Array.isArray(schemaEntry.type)) {\n        var notEmpty = false;\n        var array = parseArray(rawValue).map(function (_value) {\n          var result = parseValue(_value, schemaEntry, options);\n\n          if (result.error) {\n            value = _value;\n            error = result.error;\n            reason = result.reason;\n          }\n\n          if (result.value !== null) {\n            notEmpty = true;\n          }\n\n          return result.value;\n        });\n\n        if (!error) {\n          value = notEmpty ? array : null;\n        }\n      } else {\n        var result = parseValue(rawValue, schemaEntry, options);\n        error = result.error;\n        reason = result.reason;\n        value = error ? rawValue : result.value;\n      }\n    }\n\n    if (!error && value === null && schemaEntry.required) {\n      error = 'required';\n    }\n\n    if (error) {\n      error = {\n        error: error,\n        row: rowIndex + 1,\n        column: key,\n        value: value\n      };\n\n      if (reason) {\n        error.reason = reason;\n      }\n\n      if (schemaEntry.type) {\n        error.type = schemaEntry.type;\n      }\n\n      errors.push(error);\n    } else {\n      if (isEmptyObject && value !== null) {\n        isEmptyObject = false;\n      }\n\n      if (value !== null || options.includeNullValues) {\n        object[schemaEntry.prop] = value;\n      }\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(schema); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n\n  if (isEmptyObject) {\n    return null;\n  }\n\n  return object;\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {object} schemaEntry\r\n * @return {{ value: any, error: string }}\r\n */\n\n\nexport function parseValue(value, schemaEntry, options) {\n  if (value === null) {\n    return {\n      value: null\n    };\n  }\n\n  var result;\n\n  if (schemaEntry.parse) {\n    result = parseCustomValue(value, schemaEntry.parse);\n  } else if (schemaEntry.type) {\n    result = parseValueOfType(value, // Supports parsing array types.\n    // See `parseArray()` function for more details.\n    // Example `type`: String[]\n    // Input: 'Barack Obama, \"String, with, colons\", Donald Trump'\n    // Output: ['Barack Obama', 'String, with, colons', 'Donald Trump']\n    Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type, options);\n  } else {\n    result = {\n      value: value\n    }; // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\n  } // If errored then return the error.\n\n\n  if (result.error) {\n    return result;\n  }\n\n  if (result.value !== null) {\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\n      return {\n        error: 'invalid',\n        reason: 'unknown'\n      };\n    }\n\n    if (schemaEntry.validate) {\n      try {\n        schemaEntry.validate(result.value);\n      } catch (error) {\n        return {\n          error: error.message\n        };\n      }\n    }\n  }\n\n  return result;\n}\n/**\r\n * Converts textual value to a custom value using supplied `.parse()`.\r\n * @param  {any} value\r\n * @param  {function} parse\r\n * @return {{ value: any, error: string }}\r\n */\n\nfunction parseCustomValue(value, parse) {\n  try {\n    value = parse(value);\n\n    if (value === undefined) {\n      return {\n        value: null\n      };\n    }\n\n    return {\n      value: value\n    };\n  } catch (error) {\n    return {\n      error: error.message\n    };\n  }\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {} type\r\n * @return {{ value: (string|number|Date|boolean), error: string, reason?: string }}\r\n */\n\n\nfunction parseValueOfType(value, type, options) {\n  switch (type) {\n    case String:\n      if (typeof value === 'string') {\n        return {\n          value: value\n        };\n      } // Excel tends to perform a forced automatic convertion of string-type values\n      // to number-type ones when the user has input them. Otherwise, users wouldn't\n      // be able to perform formula calculations on those cell values because users\n      // won't bother manually choosing a \"numeric\" cell type for each cell, and\n      // even if they did, choosing a \"numeric\" cell type every time wouldn't be an\n      // acceptable \"user experience\".\n      //\n      // So, if a cell value is supposed to be a string and Excel has automatically\n      // converted it to a number, perform a backwards conversion.\n      //\n\n\n      if (typeof value === 'number') {\n        // The global `isFinite()` function filters out:\n        // * NaN\n        // * -Infinity\n        // * Infinity\n        //\n        // All other values pass (including non-numbers).\n        //\n        if (isFinite(value)) {\n          return {\n            value: String(value)\n          };\n        }\n\n        return {\n          error: 'invalid',\n          reason: 'not_a_number'\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_string'\n      };\n\n    case Number:\n    case Integer:\n      // An XLSX file editing software might not always correctly\n      // detect numeric values in string-type cells. Users won't bother\n      // manually selecting a cell type, so the editing software has to guess\n      // based on the user's input. One can assume that such auto-detection\n      // might not always work.\n      //\n      // So, if a cell is supposed to be a numeric one, convert a string value to a number.\n      //\n      if (typeof value === 'string') {\n        var stringifiedValue = value;\n        value = Number(value);\n\n        if (String(value) !== stringifiedValue) {\n          return {\n            error: 'invalid',\n            reason: 'not_a_number_string'\n          };\n        }\n      } else if (typeof value !== 'number') {\n        return {\n          error: 'invalid',\n          reason: 'not_a_number'\n        };\n      } // At this point, `value` can only be a number.\n      //\n      // The global `isFinite()` function filters out:\n      // * NaN\n      // * -Infinity\n      // * Infinity\n      //\n      // All other values pass (including non-numbers).\n      //\n\n\n      if (!isFinite(value)) {\n        return {\n          error: 'invalid',\n          reason: 'not_a_number'\n        };\n      }\n\n      if (type === Integer && !isInteger(value)) {\n        return {\n          error: 'invalid',\n          reason: 'not_an_integer'\n        };\n      }\n\n      return {\n        value: value\n      };\n\n    case URL:\n      if (typeof value === 'string') {\n        if (isURL(value)) {\n          return {\n            value: value\n          };\n        }\n\n        return {\n          error: 'invalid',\n          reason: 'not_a_url'\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_string'\n      };\n\n    case Email:\n      if (typeof value === 'string') {\n        if (isEmail(value)) {\n          return {\n            value: value\n          };\n        }\n\n        return {\n          error: 'invalid',\n          reason: 'not_an_email'\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_string'\n      };\n\n    case Date:\n      // XLSX has no specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      if (value instanceof Date) {\n        if (isNaN(value)) {\n          return {\n            error: 'invalid',\n            reason: 'out_of_bounds'\n          };\n        }\n\n        return {\n          value: value\n        };\n      }\n\n      if (typeof value === 'number') {\n        if (!isFinite(value)) {\n          return {\n            error: 'invalid',\n            reason: 'not_a_number'\n          };\n        }\n\n        value = Number(value);\n        var date = parseDate(value, options.properties);\n\n        if (isNaN(date)) {\n          return {\n            error: 'invalid',\n            reason: 'out_of_bounds'\n          };\n        }\n\n        return {\n          value: date\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_number'\n      };\n\n    case Boolean:\n      if (typeof value === 'boolean') {\n        return {\n          value: value\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_boolean'\n      };\n\n    default:\n      if (typeof type === 'function') {\n        return parseCustomValue(value, type);\n      }\n\n      throw new Error(\"Unknown schema type: \".concat(type && type.name || type));\n  }\n}\n\nexport function getBlock(string, endCharacter, startIndex) {\n  var i = 0;\n  var substring = '';\n  var character;\n\n  while (startIndex + i < string.length) {\n    var _character = string[startIndex + i];\n\n    if (_character === endCharacter) {\n      return [substring, i];\n    } else if (_character === '\"') {\n      var block = getBlock(string, '\"', startIndex + i + 1);\n      substring += block[0];\n      i += '\"'.length + block[1] + '\"'.length;\n    } else {\n      substring += _character;\n      i++;\n    }\n  }\n\n  return [substring, i];\n}\n/**\r\n * Parses a string of comma-separated substrings into an array of substrings.\r\n * (the `export` is just for tests)\r\n * @param  {string} string — A string of comma-separated substrings.\r\n * @return {string[]} An array of substrings.\r\n */\n\nexport function parseArray(string) {\n  var blocks = [];\n  var index = 0;\n\n  while (index < string.length) {\n    var _getBlock = getBlock(string, ',', index),\n        _getBlock2 = _slicedToArray(_getBlock, 2),\n        substring = _getBlock2[0],\n        length = _getBlock2[1];\n\n    index += length + ','.length;\n    blocks.push(substring.trim());\n  }\n\n  return blocks;\n} // Transpose a 2D array.\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\n\nvar transpose = function transpose(array) {\n  return array[0].map(function (_, i) {\n    return array.map(function (row) {\n      return row[i];\n    });\n  });\n};\n\nfunction validateSchema(schema) {\n  for (var _i2 = 0, _Object$keys2 = Object.keys(schema); _i2 < _Object$keys2.length; _i2++) {\n    var key = _Object$keys2[_i2];\n    var entry = schema[key];\n\n    if (!entry.prop) {\n      throw new Error(\"\\\"prop\\\" not defined for schema entry \\\"\".concat(key, \"\\\".\"));\n    }\n  }\n}","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","Symbol","iterator","_arr","_n","_d","_s","_e","call","next","done","push","value","length","err","Array","isArray","_typeof","obj","constructor","prototype","_createForOfIteratorHelperLoose","o","allowArrayLike","it","bind","minLen","_arrayLikeToArray","n","Object","toString","slice","name","from","test","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","configurable","writable","parseDate","Integer","isInteger","URL","isURL","Email","isEmail","DEFAULT_OPTIONS","isColumnOriented","data","schema","options","_options","rowMap","validateSchema","transpose","columns","results","errors","result","read","_iterator","_step","error","row","rows","rowIndex","isEmptyObject","_loop","_Object$keys","schemaEntry","isNestedSchema","type","rawValue","indexOf","undefined","reason","notEmpty","array","parseArray","map","_value","parseValue","required","column","includeNullValues","prop","parse","parseCustomValue","parseValueOfType","oneOf","validate","message","String","isFinite","Number","stringifiedValue","Date","isNaN","date","properties","Boolean","Error","concat","getBlock","string","endCharacter","startIndex","substring","character","_character","block","blocks","index","_getBlock","_getBlock2","trim","_","_i2","_Object$keys2","entry"],"sources":["F:/New folder/shopfront/node_modules/read-excel-file/modules/read/schema/convertToJson.js"],"sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseDate from '../parseDate.js';\nimport Integer, { isInteger } from '../../types/Integer.js';\nimport URL, { isURL } from '../../types/URL.js';\nimport Email, { isEmail } from '../../types/Email.js';\nvar DEFAULT_OPTIONS = {\n  isColumnOriented: false\n};\n/**\r\n * Convert 2D array to nested objects.\r\n * If row oriented data, row 0 is dotted key names.\r\n * Column oriented data is transposed.\r\n * @param {any[][]} data - An array of rows, each row being an array of cells.\r\n * @param {object} schema\r\n * @return {object[]}\r\n */\n\nexport default function (data, schema, options) {\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  var _options = options,\n      isColumnOriented = _options.isColumnOriented,\n      rowMap = _options.rowMap;\n  validateSchema(schema);\n\n  if (isColumnOriented) {\n    data = transpose(data);\n  }\n\n  var columns = data[0];\n  var results = [];\n  var errors = [];\n\n  for (var i = 1; i < data.length; i++) {\n    var result = read(schema, data[i], i - 1, columns, errors, options);\n\n    if (result) {\n      results.push(result);\n    }\n  } // Correct error rows.\n\n\n  if (rowMap) {\n    for (var _iterator = _createForOfIteratorHelperLoose(errors), _step; !(_step = _iterator()).done;) {\n      var error = _step.value;\n      // Convert the `row` index in `data` to the\n      // actual `row` index in the spreadsheet.\n      // The `1` compensates for the header row.\n      error.row = rowMap[error.row] + 1;\n    }\n  }\n\n  return {\n    rows: results,\n    errors: errors\n  };\n}\n\nfunction read(schema, row, rowIndex, columns, errors, options) {\n  var object = {};\n  var isEmptyObject = true;\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var schemaEntry = schema[key];\n    var isNestedSchema = _typeof(schemaEntry.type) === 'object' && !Array.isArray(schemaEntry.type);\n    var rawValue = row[columns.indexOf(key)];\n\n    if (rawValue === undefined) {\n      rawValue = null;\n    }\n\n    var value = void 0;\n    var error = void 0;\n    var reason = void 0;\n\n    if (isNestedSchema) {\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options);\n    } else {\n      if (rawValue === null) {\n        value = null;\n      } else if (Array.isArray(schemaEntry.type)) {\n        var notEmpty = false;\n        var array = parseArray(rawValue).map(function (_value) {\n          var result = parseValue(_value, schemaEntry, options);\n\n          if (result.error) {\n            value = _value;\n            error = result.error;\n            reason = result.reason;\n          }\n\n          if (result.value !== null) {\n            notEmpty = true;\n          }\n\n          return result.value;\n        });\n\n        if (!error) {\n          value = notEmpty ? array : null;\n        }\n      } else {\n        var result = parseValue(rawValue, schemaEntry, options);\n        error = result.error;\n        reason = result.reason;\n        value = error ? rawValue : result.value;\n      }\n    }\n\n    if (!error && value === null && schemaEntry.required) {\n      error = 'required';\n    }\n\n    if (error) {\n      error = {\n        error: error,\n        row: rowIndex + 1,\n        column: key,\n        value: value\n      };\n\n      if (reason) {\n        error.reason = reason;\n      }\n\n      if (schemaEntry.type) {\n        error.type = schemaEntry.type;\n      }\n\n      errors.push(error);\n    } else {\n      if (isEmptyObject && value !== null) {\n        isEmptyObject = false;\n      }\n\n      if (value !== null || options.includeNullValues) {\n        object[schemaEntry.prop] = value;\n      }\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(schema); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n\n  if (isEmptyObject) {\n    return null;\n  }\n\n  return object;\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {object} schemaEntry\r\n * @return {{ value: any, error: string }}\r\n */\n\n\nexport function parseValue(value, schemaEntry, options) {\n  if (value === null) {\n    return {\n      value: null\n    };\n  }\n\n  var result;\n\n  if (schemaEntry.parse) {\n    result = parseCustomValue(value, schemaEntry.parse);\n  } else if (schemaEntry.type) {\n    result = parseValueOfType(value, // Supports parsing array types.\n    // See `parseArray()` function for more details.\n    // Example `type`: String[]\n    // Input: 'Barack Obama, \"String, with, colons\", Donald Trump'\n    // Output: ['Barack Obama', 'String, with, colons', 'Donald Trump']\n    Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type, options);\n  } else {\n    result = {\n      value: value\n    }; // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\n  } // If errored then return the error.\n\n\n  if (result.error) {\n    return result;\n  }\n\n  if (result.value !== null) {\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\n      return {\n        error: 'invalid',\n        reason: 'unknown'\n      };\n    }\n\n    if (schemaEntry.validate) {\n      try {\n        schemaEntry.validate(result.value);\n      } catch (error) {\n        return {\n          error: error.message\n        };\n      }\n    }\n  }\n\n  return result;\n}\n/**\r\n * Converts textual value to a custom value using supplied `.parse()`.\r\n * @param  {any} value\r\n * @param  {function} parse\r\n * @return {{ value: any, error: string }}\r\n */\n\nfunction parseCustomValue(value, parse) {\n  try {\n    value = parse(value);\n\n    if (value === undefined) {\n      return {\n        value: null\n      };\n    }\n\n    return {\n      value: value\n    };\n  } catch (error) {\n    return {\n      error: error.message\n    };\n  }\n}\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {} type\r\n * @return {{ value: (string|number|Date|boolean), error: string, reason?: string }}\r\n */\n\n\nfunction parseValueOfType(value, type, options) {\n  switch (type) {\n    case String:\n      if (typeof value === 'string') {\n        return {\n          value: value\n        };\n      } // Excel tends to perform a forced automatic convertion of string-type values\n      // to number-type ones when the user has input them. Otherwise, users wouldn't\n      // be able to perform formula calculations on those cell values because users\n      // won't bother manually choosing a \"numeric\" cell type for each cell, and\n      // even if they did, choosing a \"numeric\" cell type every time wouldn't be an\n      // acceptable \"user experience\".\n      //\n      // So, if a cell value is supposed to be a string and Excel has automatically\n      // converted it to a number, perform a backwards conversion.\n      //\n\n\n      if (typeof value === 'number') {\n        // The global `isFinite()` function filters out:\n        // * NaN\n        // * -Infinity\n        // * Infinity\n        //\n        // All other values pass (including non-numbers).\n        //\n        if (isFinite(value)) {\n          return {\n            value: String(value)\n          };\n        }\n\n        return {\n          error: 'invalid',\n          reason: 'not_a_number'\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_string'\n      };\n\n    case Number:\n    case Integer:\n      // An XLSX file editing software might not always correctly\n      // detect numeric values in string-type cells. Users won't bother\n      // manually selecting a cell type, so the editing software has to guess\n      // based on the user's input. One can assume that such auto-detection\n      // might not always work.\n      //\n      // So, if a cell is supposed to be a numeric one, convert a string value to a number.\n      //\n      if (typeof value === 'string') {\n        var stringifiedValue = value;\n        value = Number(value);\n\n        if (String(value) !== stringifiedValue) {\n          return {\n            error: 'invalid',\n            reason: 'not_a_number_string'\n          };\n        }\n      } else if (typeof value !== 'number') {\n        return {\n          error: 'invalid',\n          reason: 'not_a_number'\n        };\n      } // At this point, `value` can only be a number.\n      //\n      // The global `isFinite()` function filters out:\n      // * NaN\n      // * -Infinity\n      // * Infinity\n      //\n      // All other values pass (including non-numbers).\n      //\n\n\n      if (!isFinite(value)) {\n        return {\n          error: 'invalid',\n          reason: 'not_a_number'\n        };\n      }\n\n      if (type === Integer && !isInteger(value)) {\n        return {\n          error: 'invalid',\n          reason: 'not_an_integer'\n        };\n      }\n\n      return {\n        value: value\n      };\n\n    case URL:\n      if (typeof value === 'string') {\n        if (isURL(value)) {\n          return {\n            value: value\n          };\n        }\n\n        return {\n          error: 'invalid',\n          reason: 'not_a_url'\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_string'\n      };\n\n    case Email:\n      if (typeof value === 'string') {\n        if (isEmail(value)) {\n          return {\n            value: value\n          };\n        }\n\n        return {\n          error: 'invalid',\n          reason: 'not_an_email'\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_string'\n      };\n\n    case Date:\n      // XLSX has no specific format for dates.\n      // Sometimes a date can be heuristically detected.\n      // https://github.com/catamphetamine/read-excel-file/issues/3#issuecomment-395770777\n      if (value instanceof Date) {\n        if (isNaN(value)) {\n          return {\n            error: 'invalid',\n            reason: 'out_of_bounds'\n          };\n        }\n\n        return {\n          value: value\n        };\n      }\n\n      if (typeof value === 'number') {\n        if (!isFinite(value)) {\n          return {\n            error: 'invalid',\n            reason: 'not_a_number'\n          };\n        }\n\n        value = Number(value);\n        var date = parseDate(value, options.properties);\n\n        if (isNaN(date)) {\n          return {\n            error: 'invalid',\n            reason: 'out_of_bounds'\n          };\n        }\n\n        return {\n          value: date\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_number'\n      };\n\n    case Boolean:\n      if (typeof value === 'boolean') {\n        return {\n          value: value\n        };\n      }\n\n      return {\n        error: 'invalid',\n        reason: 'not_a_boolean'\n      };\n\n    default:\n      if (typeof type === 'function') {\n        return parseCustomValue(value, type);\n      }\n\n      throw new Error(\"Unknown schema type: \".concat(type && type.name || type));\n  }\n}\n\nexport function getBlock(string, endCharacter, startIndex) {\n  var i = 0;\n  var substring = '';\n  var character;\n\n  while (startIndex + i < string.length) {\n    var _character = string[startIndex + i];\n\n    if (_character === endCharacter) {\n      return [substring, i];\n    } else if (_character === '\"') {\n      var block = getBlock(string, '\"', startIndex + i + 1);\n      substring += block[0];\n      i += '\"'.length + block[1] + '\"'.length;\n    } else {\n      substring += _character;\n      i++;\n    }\n  }\n\n  return [substring, i];\n}\n/**\r\n * Parses a string of comma-separated substrings into an array of substrings.\r\n * (the `export` is just for tests)\r\n * @param  {string} string — A string of comma-separated substrings.\r\n * @return {string[]} An array of substrings.\r\n */\n\nexport function parseArray(string) {\n  var blocks = [];\n  var index = 0;\n\n  while (index < string.length) {\n    var _getBlock = getBlock(string, ',', index),\n        _getBlock2 = _slicedToArray(_getBlock, 2),\n        substring = _getBlock2[0],\n        length = _getBlock2[1];\n\n    index += length + ','.length;\n    blocks.push(substring.trim());\n  }\n\n  return blocks;\n} // Transpose a 2D array.\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\n\nvar transpose = function transpose(array) {\n  return array[0].map(function (_, i) {\n    return array.map(function (row) {\n      return row[i];\n    });\n  });\n};\n\nfunction validateSchema(schema) {\n  for (var _i2 = 0, _Object$keys2 = Object.keys(schema); _i2 < _Object$keys2.length; _i2++) {\n    var key = _Object$keys2[_i2];\n    var entry = schema[key];\n\n    if (!entry.prop) {\n      throw new Error(\"\\\"prop\\\" not defined for schema entry \\\"\".concat(key, \"\\\".\"));\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}